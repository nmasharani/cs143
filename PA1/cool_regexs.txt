/* Definitions */

DIGIT            [0-9]
LETTER           [a-zA-Z]
UPPERCASE_LETTER [A-Z]
LOWERCASE_LETTER [a-z]
NOT_IN_STR       [<<EOF>>\0]


/* Rules */

INT_CONST           	{DIGIT}+
TYPEID              	{UPPERCASE_LETTER}({LETTER}|_|{DIGIT})*
OBJECTID   				{LOWERCASE_LETTER}({LETTER}|_|{DIGIT})*
STR_CONST 				"([^(<<EOF>>\0)])*[^(\<<EOF>>\0)]"

OPEN_COMMENT_TYPE1		--
OPEN_COMMENT_TYPE2 		(*
CLOSE_COMMENT_TYPE2 	*)




/* Keyword matching */

([cC][lL][aA][sS][sS])
// class

([eE][lL][sS][eE])
// else 

([fF][iI])
// fi

([iI][fF])
// if

([iI][nN])
// in

([iI][nN][hH][eE][rR][iI][tT][sS])
// inherits

([iI][sS][vV][oO][iI][dD])
// isvoid

([lL][eE][tT])
// let

([lL][oO][oO][pP])
// loop

([pP][oO][oO][lL])
// pool

([tT][hH][eE][nN])
// then

([wW][hH][iI][lL][eE])
// while

([cC][aA][sS][eE])
// case

([eE][sS][aA][cC])
// esac

([nN][eE][wW])
// new

([oO][fF])
// of

([nN][oO][tT])
// not

(t[rR][uU][eE])
// true

(f[aA][lL][sS][eE])
// false



/* Whitespace */

[' ''\n''\f''\r''\t''\v']

/* Operators - for all of these, simply return ascii value and assign lval accordingly*/

"+"
"/"
"-"
"*"
"="
"<"
"."
"~"
","
";"
":"
"("
")"
"@"
"{"
"}"

"<-" /* assign */
"<=" /* le */
"=>" /* darrow */

.* /* ERROR */