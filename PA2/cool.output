Nonterminals useless in grammar

   formal_list.opt
   formal_list
   formal
   expr
   let_list
   case_list
   case_list_elem
   exprs
   expr_list.opt
   expr_list
   dispatch.opt


Terminals unused in grammar

   ELSE
   FI
   IF
   IN
   LET
   LOOP
   POOL
   THEN
   WHILE
   CASE
   ESAC
   OF
   DARROW
   NEW
   ISVOID
   STR_CONST
   INT_CONST
   BOOL_CONST
   ASSIGN
   NOT
   LE
   ERROR
   '('
   ')'
   '<'
   '-'
   ','
   '.'
   '+'
   '*'
   '/'
   '~'
   '='
   '>'
   '@'


Rules useless in grammar

   11 feature: OBJECTID '(' formal_list.opt ')' ':' TYPEID '{' expr '}'

   12 assignment.opt: '<' '-' expr

   13 formal_list.opt: /* empty */
   14                | formal_list

   15 formal_list: formal
   16            | formal_list ',' formal

   17 formal: OBJECTID ':' TYPEID

   18 expr: OBJECTID '<' '-' expr
   19     | expr dispatch.opt '.' OBJECTID '(' expr_list.opt ')'
   20     | OBJECTID '(' expr_list.opt ')' IF expr THEN expr ELSE expr FI WHILE expr LOOP expr POOL '{' exprs '}' LET let_list IN expr CASE expr OF case_list ESAC NEW TYPEID ISVOID expr expr '+' expr expr '-' expr expr '*' expr expr '/' expr '~' expr expr '<' expr expr '<' '=' expr expr '=' expr NOT expr '(' expr ')' OBJECTID INT_CONST STR_CONST BOOL_CONST

   21 let_list: OBJECTID ':' TYPEID assignment.opt
   22         | let_list ',' OBJECTID ':' TYPEID assignment.opt

   23 case_list: case_list_elem
   24          | case_list case_list_elem

   25 case_list_elem: OBJECTID ':' TYPEID '=' '>' expr ';'

   26 exprs: expr ';'
   27      | exprs expr ';'

   28 expr_list.opt: /* empty */
   29              | expr_list

   30 expr_list: expr
   31          | expr_list ',' expr

   32 dispatch.opt: /* empty */
   33             | '@' TYPEID


State 9 conflicts: 1 shift/reduce
State 14 conflicts: 1 shift/reduce


Grammar

    0 $accept: program $end

    1 program: class_list

    2 class_list: class
    3           | class_list class

    4 class: CLASS TYPEID '{' feature_list '}' ';'
    5      | CLASS TYPEID INHERITS TYPEID '{' feature_list '}' ';'

    6 feature_list: /* empty */
    7             | feature
    8             | feature_list feature

    9 feature: OBJECTID ':' TYPEID assignment.opt

   10 assignment.opt: /* empty */


Terminals, with rules where they appear

$end (0) 0
'(' (40)
')' (41)
'*' (42)
'+' (43)
',' (44)
'-' (45)
'.' (46)
'/' (47)
':' (58) 9
';' (59) 4 5
'<' (60)
'=' (61)
'>' (62)
'@' (64)
'{' (123) 4 5
'}' (125) 4 5
'~' (126)
error (256)
CLASS (258) 4 5
ELSE (259)
FI (260)
IF (261)
IN (262)
INHERITS (263) 5
LET (264)
LOOP (265)
POOL (266)
THEN (267)
WHILE (268)
CASE (269)
ESAC (270)
OF (271)
DARROW (272)
NEW (273)
ISVOID (274)
STR_CONST (275)
INT_CONST (276)
BOOL_CONST (277)
TYPEID (278) 4 5 9
OBJECTID (279) 9
ASSIGN (280)
NOT (281)
LE (282)
ERROR (283)


Nonterminals, with rules where they appear

$accept (46)
    on left: 0
program (47)
    on left: 1, on right: 0
class_list (48)
    on left: 2 3, on right: 1 3
class (49)
    on left: 4 5, on right: 2 3
feature_list (50)
    on left: 6 7 8, on right: 4 5 8
feature (51)
    on left: 9, on right: 7 8
assignment.opt (52)
    on left: 10, on right: 9


state 0

    0 $accept: . program $end

    CLASS  shift, and go to state 1

    program     go to state 2
    class_list  go to state 3
    class       go to state 4


state 1

    4 class: CLASS . TYPEID '{' feature_list '}' ';'
    5      | CLASS . TYPEID INHERITS TYPEID '{' feature_list '}' ';'

    TYPEID  shift, and go to state 5


state 2

    0 $accept: program . $end

    $end  shift, and go to state 6


state 3

    1 program: class_list .
    3 class_list: class_list . class

    CLASS  shift, and go to state 1

    $default  reduce using rule 1 (program)

    class  go to state 7


state 4

    2 class_list: class .

    $default  reduce using rule 2 (class_list)


state 5

    4 class: CLASS TYPEID . '{' feature_list '}' ';'
    5      | CLASS TYPEID . INHERITS TYPEID '{' feature_list '}' ';'

    INHERITS  shift, and go to state 8
    '{'       shift, and go to state 9


state 6

    0 $accept: program $end .

    $default  accept


state 7

    3 class_list: class_list class .

    $default  reduce using rule 3 (class_list)


state 8

    5 class: CLASS TYPEID INHERITS . TYPEID '{' feature_list '}' ';'

    TYPEID  shift, and go to state 10


state 9

    4 class: CLASS TYPEID '{' . feature_list '}' ';'

    OBJECTID  shift, and go to state 11

    OBJECTID  [reduce using rule 6 (feature_list)]
    $default  reduce using rule 6 (feature_list)

    feature_list  go to state 12
    feature       go to state 13


state 10

    5 class: CLASS TYPEID INHERITS TYPEID . '{' feature_list '}' ';'

    '{'  shift, and go to state 14


state 11

    9 feature: OBJECTID . ':' TYPEID assignment.opt

    ':'  shift, and go to state 15


state 12

    4 class: CLASS TYPEID '{' feature_list . '}' ';'
    8 feature_list: feature_list . feature

    OBJECTID  shift, and go to state 11
    '}'       shift, and go to state 16

    feature  go to state 17


state 13

    7 feature_list: feature .

    $default  reduce using rule 7 (feature_list)


state 14

    5 class: CLASS TYPEID INHERITS TYPEID '{' . feature_list '}' ';'

    OBJECTID  shift, and go to state 11

    OBJECTID  [reduce using rule 6 (feature_list)]
    $default  reduce using rule 6 (feature_list)

    feature_list  go to state 18
    feature       go to state 13


state 15

    9 feature: OBJECTID ':' . TYPEID assignment.opt

    TYPEID  shift, and go to state 19


state 16

    4 class: CLASS TYPEID '{' feature_list '}' . ';'

    ';'  shift, and go to state 20


state 17

    8 feature_list: feature_list feature .

    $default  reduce using rule 8 (feature_list)


state 18

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list . '}' ';'
    8 feature_list: feature_list . feature

    OBJECTID  shift, and go to state 11
    '}'       shift, and go to state 21

    feature  go to state 17


state 19

    9 feature: OBJECTID ':' TYPEID . assignment.opt

    $default  reduce using rule 10 (assignment.opt)

    assignment.opt  go to state 22


state 20

    4 class: CLASS TYPEID '{' feature_list '}' ';' .

    $default  reduce using rule 4 (class)


state 21

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list '}' . ';'

    ';'  shift, and go to state 23


state 22

    9 feature: OBJECTID ':' TYPEID assignment.opt .

    $default  reduce using rule 9 (feature)


state 23

    5 class: CLASS TYPEID INHERITS TYPEID '{' feature_list '}' ';' .

    $default  reduce using rule 5 (class)
